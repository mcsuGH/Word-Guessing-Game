/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package game;

import org.junit.*;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.*;

public class AppTest {
    private static final WordChoser mockChoser = mock(WordChoser.class);
    private final InputStream systemIn = System.in;
    private final PrintStream systemOut = System.out;
    private ByteArrayInputStream testIn;
    private ByteArrayOutputStream testOut;

    @Before public void setupTests() {
        when(mockChoser.getRandomWordFromDictionary()).thenReturn("MAKERS");
        testOut = new ByteArrayOutputStream();
        System.setOut(new PrintStream(testOut));
    }

    private void provideInput(String data) {
        testIn = new ByteArrayInputStream(data.getBytes());
        System.setIn(testIn);
    }

    private String getOutput() {
        return testOut.toString();
    }

    @After
    public void restoreSystemInputOutput() {
        System.setIn(systemIn);
        System.setOut(systemOut);
    }

    @Test public void testApp() throws IOException {
        final String testString = "Maker" + System.getProperty("line.separator")
                + "A" + System.getProperty("line.separator")
                + "K" + System.getProperty("line.separator")
                + "E" + System.getProperty("line.separator")
                + "R" + System.getProperty("line.separator")
                + "S" + System.getProperty("line.separator");
        provideInput(testString);

        App app= new App(testIn, mockChoser, new Masker());
        app.multiPlayer(0,1);

        String[] appOutput = getOutput().toString().split("\\r?\\n");

        assertEquals("Enter name for Player 1: Welcome! Today the word to guess is:", appOutput[0]);
        assertEquals("Maker: M_____ ", appOutput[1]);

        assertEquals("", appOutput[2]);
        assertEquals("Maker: Enter one letter to guess: (10 attempts remaining): ", appOutput[3]);
        assertEquals("Right!", appOutput[4]);
        assertEquals("Maker: MA____ ", appOutput[5]);

        assertEquals("", appOutput[6]);
        assertEquals("Maker: Enter one letter to guess: (10 attempts remaining): ", appOutput[7]);
        assertEquals("Right!", appOutput[8]);
        assertEquals("Maker: MAK___ ", appOutput[9]);

        assertEquals("", appOutput[10]);
        assertEquals("Maker: Enter one letter to guess: (10 attempts remaining): ", appOutput[11]);
        assertEquals("Right!", appOutput[12]);
        assertEquals("Maker: MAKE__ ", appOutput[13]);

        assertEquals("", appOutput[14]);
        assertEquals("Maker: Enter one letter to guess: (10 attempts remaining): ", appOutput[15]);
        assertEquals("Right!", appOutput[16]);
        assertEquals("Maker: MAKER_ ", appOutput[17]);

        assertEquals("", appOutput[18]);
        assertEquals("Maker: Enter one letter to guess: (10 attempts remaining): ", appOutput[19]);
        assertEquals("Right!", appOutput[20]);
        assertEquals("Maker: MAKERS ", appOutput[21]);

        assertEquals("Congratulations Maker! The word was MAKERS. ", appOutput[22]);
    }
}
