/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package game;

import java.util.Random;
import java.util.ArrayList;
import java.io.*;

public class App {
    private final BufferedReader input;
    private final PrintStream output;
    private final ArrayList<Game> games;
    private final WordChoser choser;
    private final Masker masker;

    public App(InputStream input, PrintStream output, WordChoser choser, Masker masker) {
        this.input = new BufferedReader(new InputStreamReader(input));
        this.output = output;
        this.games = new ArrayList<Game>();
        this.choser = choser;
        this.masker = masker;
    }

    public static void main(String[] args) throws IOException {
        Random rand = new Random();
        App app = new App(System.in, System.out, new WordChoser(), new Masker());

        System.out.print("Please enter the number of players: ");
        Integer numberOfPlayers = Integer.parseInt(app.input.readLine());
        Integer initialTurn = rand.nextInt(numberOfPlayers);

        app.multiPlayer(initialTurn, numberOfPlayers);
    }

    public void multiPlayer(Integer initialTurn, Integer numberOfPlayers) throws IOException {
        setupGame(games, numberOfPlayers);
        playGame(games, initialTurn, numberOfPlayers);
        endGame(games);
    }

    public void setupGame(ArrayList<Game> games, Integer numberOfPlayers) throws IOException {
        for (int i = 0; i < numberOfPlayers; i++) {
            System.out.printf("Enter name for Player %d: ", i + 1);
            String playerName = input.readLine();
            games.add(new Game(choser, masker, playerName));
        }

        System.out.println("Welcome! Today the word to guess is:");
        for (Game game : games) {
            System.out.printf("%s: %s \n", game.getName(), game.getWordToGuess());
        };
    }

    public Boolean isGameOver(ArrayList<Game> games) {
        if (games.stream().anyMatch(game -> game.isGameWon())) {
            return true;
        }
        if (games.stream().allMatch(game -> game.isGameLost())) {
            return true;
        }
        return false;
    }

    public void playGame(ArrayList<Game> games, Integer initialTurn, Integer numberOfPlayers) throws IOException {
        Integer turn = initialTurn;

        while (!isGameOver(games)) {
            Integer playerTurn = turn % numberOfPlayers;
            Game currentPlayer = games.get(playerTurn);
            if (!currentPlayer.isGameLost()) {
                System.out.printf("\n%s: Enter one letter to guess: (%d attempts remaining): \n", currentPlayer.getName(), currentPlayer.getRemainingAttempts());
                Character guessedLetter = input.readLine().charAt(0);
                Boolean result = currentPlayer.guessLetter(guessedLetter);
                if (result) {
                    System.out.println("Right!");
                } else {
                    System.out.println("Wrong...");
                }
                System.out.printf("%s: %s \n", currentPlayer.getName(), currentPlayer.getWordToGuess());
            }
            turn += 1;
        }
    }

    public void endGame(ArrayList<Game> games) {
        if (isGameOver(games)) {
            if (games.stream().anyMatch(game -> game.isGameWon())) {
                Game winner = games.stream().filter(game -> game.isGameWon()).findAny().get();
                System.out.printf("Congratulations %s! The word was %s. \n", winner.getName(), winner.getWordToGuess());
            } else {
                System.out.println("Everybody has used up their attempts!");
            }
        }
    }
}
